name: Run Selenium Tests and Create Release1

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "30 14 * * 1-6"

permissions:
  contents: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      selenium:
        image: selenium/standalone-chrome:latest  # Using Selenium Chrome standalone service
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Docker version
        run: docker --version

      - name: Build Docker image
        run: |
          docker build -t my-selenium-app:latest .  # Build the Docker image

      - name: Save Docker image
        run: docker image save my-selenium-app:latest | xz -z -e -7 -T0 > selenium.xz

      - name: List Files
        run: ls -la  # Verify that selenium.xz was created

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}  # Use the run number as the version tag
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically available in Actions

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: selenium.xz  # Path to the compressed Docker image
          asset_name: selenium.xz
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      
     
      


      - name: Run Selenium tests
        run: |
          # Wait for Selenium service to be ready
          sleep 10  # Adjust if necessary
          python test_google.py > test_results.log || exit 0
          cat test_results.log    # Display test results for debugging
      - name: Show test results log
        run: cat test_results.log  

      - name: Archive Test Report
        uses: actions/upload-artifact@v3
        with:
          name: selenium-test-report
          path: report.html

      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test_results.log

      - name: Check if tests passed
        run: |
          if grep -q "FAILED" test_results.log; then
            echo "Some tests failed."
            exit 1  # Ensure the workflow fails if any test fails
          else
            echo "All tests passed."
          fi

      